---
title: some Interesting Things About Subsetting (Starring '[')
author: Nicholas Tierney
date: '2021-06-30'
slug: subsetting
categories:
  - rstats
tags:
  - rstats
  - data science
  - dplyr
  - data cleaning
output: hugodown::md_document
---

```{r setup, include = FALSE}
options(cli.width = 70)  # For tidyverse loading messages
knitr::opts_chunk$set(
  tidy.opts = list(width.cutoff = 70),  # For code
  width = 70,
  collapse = TRUE, 
  comment = "#>", 
  fig.width = 7, 
  fig.align = 'center',
  fig.asp = 0.618, # 1 / phi
  fig.retina = 2,
  out.width = "700px"
)
```

The other day a colleague of mine ran into an issue where NA values were appearing in their dataset that weren't there before - it was strange stuff! 

A close look revealed some interesting things!

Let's start by creating a dataset, `df`. This contains countries and an airport

```{r create-df}
df <- data.frame(
  country = c(NA, "AUS", "NZL", "USA "),
  airport = c(NA, "BNE", "CHC", " SFO")
)

df
```

If we want to just look at rows that contain "AUS", we can do the following:

```r
df[df$country == "AUS", ]
```

Which is asking to only choose rows where country is "AUS".

However, when we run this, we get something unexpected

```{r bracket-filter}
df[df$country == "AUS", ]
```

We get an NA row?

# What? Weird?

Under the hood, `==` is identifying rows that match this statement.

You could also do this:

```{r bracket-false-true}
df[c(FALSE, TRUE, FALSE, FALSE), ]
```

But that's too hard to manually create those vectors for datasets - we instead get that result out by running it inside the `[]`:

```{r bracket-again}
df[df$country == "AUS", ]
```

So why the NA row?

Well, we do have an NA row in the dataset:

```{r print-df-again}
df
```

And we can check what the output of `df$country == "AUS"` is:

```{r show-output}
where_match_aus <- df$country == "AUS"
where_match_aus
```

This shows us the same as what we saw above

```{r show-output-vec}
df[where_match_aus, ]
df[c(NA, TRUE, FALSE, FALSE), ]
```

But what is weird about this is that you can use `NA` inside `[]` when subsetting:

```{r show-na-filter}
df[NA, ]
```

And you get a whole lot of weird rows now? Strange, right?

And what happens when our filter is wrong? Remember, "USA" has a trailing space in it, so if we write out "USA", we get:

```{r filter-usa}
df[df$country == "USA", ]
```

Since we get `NA` when we do:

```{r just-usa}
df$country == "USA"
```

# What about base::subset or dplyr::filter

For what it's worth, this issue doesn't appear inside `base::subset` or `dplyr::filter`

```{r base-subset}
# vs subset
subset(df, country == "AUS")
subset(df, country == "USA")
subset(df, NA)
```


```{r dplyr-filter}
# vs filter
dplyr::filter(df, country == "AUS")
dplyr::filter(df, country == "USA")
dplyr::filter(df, NA)
```


# I have more questions, but I have to go

I feel like there are more questions I have about this, and I am probably missing some important details, but I just thought this was interesting!
