---
title: Why Exploring Longitudinal Data is Hard
author: ''
date: '2019-07-25'
slug: why-exploring-longitudinal-data-is-hard
draft: true
categories:
  - rstats
  - longitudinal data
  - data visualisation
  - Statistics
tags:
  - rstats
---

I think I've finally worked out how to express why it is hard to explor longitudinal data.

This is something I've been thinking about pretty intensely over the semester break.

I think that the reason is that we aren't explicitly trained in how to move from a data summary space back to the data space.

This means that when we have a dataset like the following:

```{r setup}
knitr::opts_chunk$set(eval = FALSE)
```

It is not intuitive to think about why choosing a given individual line is the one we select. 

Sure, it's interesting - it's at the bottom!

But why pick that one?

I think that the reason is we need to understand to move from a data summary space like the following, where each row is a series, or a key, or an individual, or whatever you want to call it.

```{r}

```

We then perform some way of identifying which of those individuals are interesting, keep them, then unpack those individuals back to their full data.

So, I think that the problem is that we don't think clearly in terms of stepping from the data space into a summary space, and then stepping back.

We need a tool to step back between the summary space and the data space - and that tool has existed in data bases for a long time.

It is the a join! i guess, specifically, a left join. The main join to know.

So what I need to do now is create a series of animations to show what I mean in these cases.

Something that collapses a series of lines down to a point, the points are then chosen, and unpacked back into lines.

I guess it looks like this:

```{r}
library(tidyverse)
library(brolgar)

h_cut <- sample_n_keys(heights, 5) %>%
  mutate(type = "raw")

ggplot(h_cut,
       aes(x = year,
           y = height_cm,
           colour = country)) + 
  geom_line() + 
  theme(legend.position = "bottom")

# demonstrate these lines collapsing down onto a point
h_sum <- h_cut %>%
  features(height_cm, list(height_cm = mean)) %>%
  mutate(year = max(h_cut$year),
         type = "summary") 

ggplot(h_sum,
       aes(x = year,
           y = height_cm)) + 
  geom_point()

# combined:
p <- ggplot(h_cut,
       aes(x = year,
           y = height_cm,
           colour = country)) + 
  geom_line() + 
  geom_point(data = h_sum,
             aes(x = year,
                 y = height_cm,
                 colour = country))

p
```


Manually trasition from line to points

```{r}
library(gganimate)
anim <- p + 
  transition_layers(keep_layers = FALSE) + 
  enter_grow() + 
  exit_shrink() + 
  ease_aes(default = "cubic-in-out")

anim
```

But is there some way to make the lines shrink into the points?

```{r}
h_full <- h_sum %>%
  full_join(h_cut)

h_full 

ggplot(h_full,
       aes(x = year,
           y = height_cm,
           group = country,
           colour = type)) + 
  geom_point() + 
  geom_line()


```



```{r}
h1 <- sample_n_keys(heights, 1) %>%
  mutate(type = "raw") %>%
  as_tibble()

ggplot(h1,
       aes(x = year,
           y = height_cm,
           group = country)) + 
  geom_point() + 
  geom_line()


hs1 <- mutate(h1, 
       type = "summary",
       year = mean(year)) %>%
  bind_rows(h1)

library(gganimate)
p1 <- ggplot(hs1,
       aes(x = year,
           y = height_cm,
           group = country,
           colour = type)) + 
  geom_point() + 
  geom_line()

anim_1 <- p1 + transition_states(type)

hs2 <- mutate(h1, 
              type = "collapse",
       year = mean(year),
       height_cm = mean(height_cm)) %>%
  bind_rows(filter(hs1, type == "summary"))

p2 <- ggplot(hs2,
       aes(x = year,
           y = height_cm,
           group = country)) + 
  geom_point() + 
  geom_line()

anim <- p2 + transition_states(type)
```

