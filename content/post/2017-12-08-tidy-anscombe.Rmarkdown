---
title: 'Tidyverse Case Study: Anscombe’s quartet'
author: ''
date: '2017-12-08'
slug: tidy-anscombe
draft: true
categories:
  - rstats
  - rbloggers
tags: []
---

Anscombe's quartet is a really cool dataset that is used to illustrate
the importance of data visualisation. It comes built into R, and reading the helpfile it states that it is:

> Four x-y datasets which have the same traditional statistical properties (mean, variance, correlation, regression line, etc.), yet are quite different.

Different, how? A visualisation of each group reveals this best:

These groups are each very similar.

As I mentioned earlier, R actually has the anscombe dataset built in, which is super cool. Even cooler, 
the helpfile event provides code exploreing and visualising anscombe's quartet:

```{r anscombe-base}
require(stats); require(graphics)
summary(anscombe)

##-- now some "magic" to do the 4 regressions in a loop:
ff <- y ~ x
mods <- setNames(as.list(1:4), paste0("lm", 1:4))
for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  mods[[i]] <- lmi <- lm(ff, data = anscombe)
  print(anova(lmi))
}

## See how close they are (numerically!)
sapply(mods, coef)
lapply(mods, function(fm) coef(summary(fm)))

## Now, do what you should have done in the first place: PLOTS
op <- par(mfrow = c(2, 2), mar = 0.1+c(4,4,1,1), oma =  c(0, 0, 2, 0))
for(i in 1:4) {
  ff[2:3] <- lapply(paste0(c("y","x"), i), as.name)
  plot(ff, data = anscombe, col = "red", pch = 21, bg = "orange", cex = 1.2,
       xlim = c(3, 19), ylim = c(3, 13))
  abline(mods[[i]], col = "blue")
}
mtext("Anscombe's 4 Regression data sets", outer = TRUE, cex = 1.5)
par(op)

```

This is great, and certainly succinct, but I think it would be interesting to
compare this process to how you would explore this using the tidyverse tools.

There are a few key parts to this analysis:

1. Tidy up the data
1. Explore the summary statistics of each group
1. Fit a model to each group
1. Make the plots in ggplot2.

## Tidy up the data

Before we tidy up the data, it is good to think about what format we want the data in.

Currently, the data is in this format:

```{r top-anscombe}
head(anscombe)
```

What we want is a format where we have:

|| variable | group | value ||
||  x       | 1     | 10    ||

We can get the data into two columns "variable" and "value" using the `tidyr`
package.

Here, we use the `gather` function, and we tell it that we want two

```{r anscombe-tidy}
library(tidyr)
library(tibble)

tidy_anscombe <- anscombe %>% 
  gather(key = "variable",
         value = "value") %>%
  as_tibble() 

tidy_anscombe
```

## Explore the summary statistics of each group

```{r anscombe-explore}
library(dplyr)
tidy_anscombe %>%
  group_by(variable) %>%
  summarise_all(funs(min,max,median,mean,sd,var))

```

## Fit a model to each group

```{r anscombe-model}

```

## Make the plots in ggplot (which you should have done in the first place).

```{r anscombe-plot}
library(ggplot2)
ggplot(tidy_anscombe,
       aes(x = variable,
           y = value)) +
  geom_point() + 
  facet_wrap(~variable)

```

# End++

So there you have it, some ways to tidy up

The base code is relatively straightforward, but, especially if you are just
starting out coding, I think that the tidyverse provides some easier footholds
that will also do the user justice later on.

# Further reading

Check out [Rasmus Bååth's post on fitting a Bayesian spike-slab model to 
accurately fit to anscombe's quartet](). Cool stuff!

Note: Can I create "Tierney's Trio", or something? Some sort of canonical data
set that contains missing values?
