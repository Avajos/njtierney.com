---
title: 'naniar 0.3.1'
author: ''
date: '2018-06-12'
slug: naniar-on-cran
categories: [rstats]
tags: []
---

`naniar` version 0.3.1 "Strawberry's Adventure" is [now on CRAN](https://cran.r-project.org/web/packages/naniar/index.html), hooray!

```{r strawberry, fig.align = "center", echo = FALSE, out.width = "50%"}
knitr::include_graphics("https://njtierney.updog.co/img/naniar-strawberry.png")
```

_Strawberry the cab horse turning into Fledge, the Pegasus, the first talking animal of Narnia_

`naniar` is a R package that makes it easier to explore, analyse, and visualise missing data and imputed values. It is designed to be [tidyverse](https://www.tidyverse.org/)-friendly, so it works fluidly in an analysis workflow.

I encountered some pretty gnarly missing data when I first started my PhD, which was really frustrating. I wanted to do something about it, and the `naniar` package is the realisation of that frustration. Currently, `naniar` aims to make it easy to do the following:

1. Find if there is missing data, and how much there is.
1. Clean up, tidy, and recode missing values
1. Explore why data is missing
1. Evaluate imputed values

I've written in more detail about how to get started with missing data in this ["getting started"](http://naniar.njtierney.com/articles/getting-started-w-naniar.html). I would recommend starting there for a quick tour of the features of missing data.

There were a few things that changed in this release, so let's break them down now.

## Visualising patterns of missingness

Visualising the different co-occurences of missingness is tricky. This is where
you want to show where there are cases or variables that have the same number of
missings. You can now visualise these missingness patterns using `upset` 
plots from [`UpSetR` package](https://github.com/hms-dbmi/UpSetR)[^1]. To create these, you need to get the data into the right format using `as_shadow_upset`, and then call UpSetR:
  
```{r show-upsetR}
library(naniar)
library(ggplot2)

riskfactors %>%
    as_shadow_upset() %>%
    UpSetR::upset()
```

On the left is a plot of the number of missings in each individual variable (missingness is indicated here with `variable_NA`), and then on the right we have the size of the missingness in the combinations of variables. So here we see that out of the variables selected, the largest number of missings is about 72. This means that there are 72 rows where all five of these variables are missing. You can decide to look at more possible sets of missings by changing the `nsets` option in `upset` to be the same as the number of variables with missings - using the new `n_var_miss` function:

```{r show-upset-all}

risk_n_var_miss <- n_var_miss(riskfactors)

riskfactors %>%
    as_shadow_upset() %>%
    UpSetR::upset(nsets = risk_n_var_miss)
```

There are more missingness patterns, and this is a little hard to read though, so use wisely!

## New colours for gg_miss_case and gg_miss_var

The default colour for `gg_miss_case` and `gg_miss_var` is now  a lorikeet purple, taken from from [ochRe package](https://github.com/ropenscilabs/ochRe). Previously, `gg_miss_var` had a different colour for each variable, but I found that this was unnecessary. Additionally, `gg_miss_case` is ordered by the most missing cases at the top, and also gains a `show_pct` option to be consistent with `gg_miss_var` [#153](https://github.com/njtierney/naniar/issues/153).

```{r gg-miss-case}

gg_miss_case(airquality)

```
 
```{r gg-miss-var}
gg_miss_var(airquality)
```


`gg_miss_which` has been is rotated 90 degrees so it is easier to read variable names

```{r gg-miss-which}

gg_miss_which(airquality)

```


`gg_miss_fct` now uses a minimal theme and tilts the axis labels [#118](https://github.com/njtierney/naniar/issues/118). This plot shows us the amount of missings in each column of a dataset for a given factor.

```{r gg_miss_fct}

gg_miss_fct(x = riskfactors, fct = marital)

```

Aesthetics now map as expected in `geom_miss_point()`. This means you can write 
things like `geom_miss_point(aes(colour = Month))` and it works appropriately. This was fixed by [Luke Smith](https://github.com/seasmith) in [#144](https://github.com/njtierney/naniar/pull/144), fixing [#137](https://github.com/njtierney/naniar/issues/137). This removes the colouring provides by default, as it is overrided.

```{r geom-miss-point}

ggplot(airquality,
       aes(x = Ozone,
           y = Solar.R,
           colour = factor(Month))) +
  geom_miss_point()  

```


## List common types of missing.

There are a ton of "gotcha's" when it comes to missing data, and I find myself often feeling like this:

```{r kramer-gif, out.width = "50%", echo = FALSE, fig.align = "center"}

knitr::include_graphics("https://njtierney.updog.co/gifs/narnia-kramer.gif")

```

One that is rather frustrating is when there are hidden NA values lurking. Some famous ones that I've come into contact with are: " NA" and "NA ". `common_na_strings` is a vector of possible NA strings to watch out for, and `common_na_numbers` is a vector of possible NA numbers to be wary of:

```{r common-na-string}

common_na_strings
common_na_numbers

```

These can be combined to look for unusual missing values in a dataset with `miss_scan_count`:

```{r miss-scan-count}
 dat_ms <- tibble::tribble(~x,  ~y,    ~z,
                          1,   "A",   -100,
                          3,   "N/A", -99,
                          NA,  NA,    -98,
                          -99, "E",   -101,
                          -98, "F",   -1)

 miss_scan_count(dat_ms,-99)
 miss_scan_count(dat_ms,c(-99,-98))
 miss_scan_count(dat_ms,c("-99","-98","N/A"))
 miss_scan_count(dat_ms,common_na_strings)
 miss_scan_count(dat_ms,common_na_numbers)
```

## Imputation 

I've added some imputation functions into `naniar`. These are not what
I would recommend using to draw inferenes, but instead something to explore structure in the missingness, and to actually visualise missing values.

There are two main imputation functions that have been added:

* `impute_below`, and 
* `impute_mean`.

`impute_below` imputes values below the range of the data, so that they can be visualised. This is similar to `shadow_shift`, but framed at a whole dataframe. `impute_mean` imputes the mean, and for factors will imputes the mode, randomly choosing a tie breaker if there is a tie.

`impute_below` amd `impute_mean` each have scoped variants that work for specific named columns, `_at` and `_if`, and `_all` for columns that satisfy some predicate function.

This means `impute_below_at` can be used for specified columns, and `impute_below_if` will be applied on columns that satisfy some condition. For example, is.numeric. We can impute the mean for only numeric data, using `bind_shadow` and `add_label_shadow` to track the missing values so we can plot them:

```{r impute-mean-if}
airquality %>%
  bind_shadow() %>%
  add_label_shadow() %>%
  impute_mean_if(is.numeric) %>%
  ggplot(aes(x = Ozone,
             y = Solar.R,
             colour = any_missing)) + 
    geom_point()
```

`impute_below` Perfoms as for `shadow_shift`, but performs on all columns (`impute_below` doesn't have an `_all` suffix). This means that it imputes missing values 10% below the range of the  data (powered by `shadow_shift`), to facilitate graphical exloration of  the data. In addition to this, `impute_below` and `shadow_shift` gain arguments `prop_below` and `jitter`, to control  the degree of shift, and also the extent of jitter.

So 10% jitter

```{r jitter-10}
airquality %>%
  bind_shadow() %>%
  impute_below(jitter = 0.1) %>%
  add_label_shadow() %>%
  ggplot(aes(x = Ozone,
             y = Solar.R,
             colour = any_missing)) + 
    geom_point()
```

So 20% jitter

```{r jitter-20}
airquality %>%
  bind_shadow() %>%
  impute_below(jitter = 0.2) %>%
  add_label_shadow() %>%
  ggplot(aes(x = Ozone,
             y = Solar.R,
             colour = any_missing)) + 
    geom_point()
```

And 20% jitter plus 20% below:

```{r jitter-20-below-20}
airquality %>%
  bind_shadow() %>%
  impute_below(jitter = 0.20,
               prop_below = 0.30) %>%
  add_label_shadow() %>%
  ggplot(aes(x = Ozone,
             y = Solar.R,
             colour = any_missing)) + 
    geom_point()
```

## Handy Helpers

"Handy Helpers" are functions that make some small tasks with missing data more consistent and straightforward. In this release I introduced functions that extend off of `anyNA` and generalise to `any` and `all` cases, and also work for complete data. This means we have the functions:

* `all_miss()` / `all_na()` equivalent to `all(is.na(x))`
* `any_complete()` equivalent to `all(complete.cases(x))`
* `any_miss()` equivalent to `anyNA(x)`

For example:

```{r all-any-any-miss-complete}

all_miss(airquality)
all_miss(mtcars)

any_miss(airquality)
any_miss(mtcars)

any_complete(airquality)
any_complete(mtcars)

```

We also now have `complete` completements to functions [#150](https://github.com/njtierney/naniar/issues/150):

- `miss_var_pct`   -- `complete_var_pct`
- `miss_var_prop`  -- `complete_var_prop` 
- `miss_case_pct`  -- `complete_case_pct` 
- `miss_case_prop` -- `complete_case_prop` 

There are now helpers to remove data or the shadow part of a dataframe, with `unbind_shadow` and `unbind_data`. This is handy in cases where you add the shadow to the data, do some analysis, and then you might want to discard the shadow or the data.

Imported `is_na` and `are_na` from `rlang`. These are different to base R's `is.na`, in that `is_na` return a logical vector of length 1 (does this thing contain missings?), and `are_shadow` returns a logical  vector of length of the number of names of a data.frame, more similar to `is.na()`. from base R.

```{r is-are-na}
is_na(airquality)
are_na(airquality) %>% head()
are_na(airquality) %>% tail()
```

There are also `is_shadow` and `are_shadow` functions, to determine if something contains a shadow column. Simimlar to `rlang::is_na` and `rland::are_na`, `is_shadow` This might be revisited at a later point to reflect the "shadow values" as "shades". See `is_shade` and `any_shade` in `add_label_shadow`.

```{r is-are-shadow}
is_shadow(airquality)
are_shadow(airquality)

aq_bind <- bind_shadow(airquality)
is_shadow(aq_bind)
are_shadow(aq_bind)
```

Added `miss_var_which`, to lists the variable names with missings

```{r miss-var-which}
miss_var_which(airquality)
```

## Minor Changes

`miss_var_summary` and `miss_case_summary` now return use `order = TRUE` by default, so cases and variables with the most missings are presented in  descending order. Fixing [#163](https://github.com/njtierney/naniar/issues/163)

I've added some detail on alternative methods for replacing with NA in the vignette [replacing values with NA](http://naniar.njtierney.com/articles/replace-with-na.html).

# Future work
    
The next release of `naniar` 0.4.0 (codenamed "An Unexpected Meeting") will feature _alternative flavours of missing value_, something that I have been thinking about for a while now. You can see my current plan at the 0.4.0 milestone [here](https://github.com/njtierney/naniar/milestone/2), it should be out before [UseR! in Brisbane](), on the 9th July.

# Thanks

Thank you to everyone who has contributed to this package and it's development over the course of the past (nearly 2!) years:

- Di Cook
- Miles McBain
- Colin Fey
- Romain François
- Jim Hester
- Luke Smith

You are all great!

If anyone has any feedback, please feel free to [file an issue here on github](https://github.com/njtierney/naniar/issues/new), and if you want an hex stickers for naniar I'll happily mail one to you - send me an email!

[^1]: https://academic.oup.com/bioinformatics/article/33/18/2938/3884387
