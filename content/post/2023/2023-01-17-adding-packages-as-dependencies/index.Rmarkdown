---
title: Adding Packages as Dependencies
author: Nicholas Tierney
date: '2023-01-17'
slug: adding-packages-as-dependencies
categories:
  - rstats
  - blag
tags:
  - rstats
  - blag
draft: yes
output: hugodown::md_document
---

```{r setup, include = FALSE}
options(cli.width = 70)  # For tidyverse loading messages
knitr::opts_chunk$set(
  tidy.opts = list(width.cutoff = 70),  # For code
  width = 70,
  collapse = TRUE, 
  comment = "#>", 
  fig.width = 7, 
  fig.align = 'center',
  fig.asp = 0.618, # 1 / phi
  fig.retina = 2,
  out.width = "700px"
)
```

I've been working on a more in depth blog post on whether you should add a package as a dependency. It got quite long and philosophical. It isn't ready yet.

So here's a short(er) post that examines the question, "should I add <PKG> as a dependency in my R package"? This blog post is aimed at the audience of R package developers.

# Should I add <PKG> as a dependency ?

Maybe! I mean, the real answer is, "it depends", but in this case, I think it is worth asking this question:

> Can I import this package for free?

For free? It's free and open source software, right? And free as in beer?

Yes, but what I mean is:

> Have I already effectively imported this package?

For example, if you've imported the package `dplyr`, and you're not sure if you should import the package, `tibble`, then you are in luck - the `dplyr` package imports `tibble` already, so you may as well import it. That is, you won't be increasing your net number of dependencies.

> How do we know this?

One way is to take a look at the DESCRIPTION file for a package, e.g., https://github.com/tidyverse/dplyr/blob/main/DESCRIPTION, and you can see the packages that it imports:

*circled image of dplyr DESCRIPTION*

However, each of those packages most likely imports other packages, which might import packages themselves, and on it goes until we get to the bottom. It's turtles all the way down. Sort of.

Now, crawling through each package and manually reading their dependencies is a lot of work - too much work! Instead, we can use an R package, [`pkgdepends`](https://github.com/r-lib/pkgdepends) by [Gábor Csárdi](https://fosstodon.org/@gaborcsardi)

## A small dislaimer

The [`pkgdepends`](https://github.com/r-lib/pkgdepends) package has a lot of capability, and I'm only using a small amount of the things we can do with it. I feel like I might be using it for some off brand use here!

## Does my package already import <PKG>?

To answer this question, we first create a new pkg dependency object, then do the following:

```{r}
# install via remotes::install_github("r-lib/pkgdepends")
library(pkgdepends)
conmat_deps <- new_pkg_deps("njtierney/conmat")
conmat_deps$solve()
solution <- conmat_deps$get_solution()
```

Then in this `data` object, we have the data listing out all of the packages used.

```{r}
solution$data
```

And the `package` column contains the list of packages:

```{r}
solution$data$package
```

So we can check, for example, if the `scales` package is imported:

```{r}
"scales" %in% solution$data$package
```

It is!

Now, by which package?

(this will probably work?)

```{r}
library(dplyr)
solution$data %>% 
  filter("scales" %in% package) %>% 
  View()
```

