---
title: visdat Version 0.6.0
author: Nicholas Tierney
date: '2023-02-02'
slug: visdat-060
categories:
  - rstats
  - data visualisation
  - Missing Data
  - rbloggers
tags:
  - rstats
  - data visualisation
  - missing-data
  - rbloggers
output: hugodown::md_document
---

```{r setup, include = FALSE}
options(cli.width = 70)  # For tidyverse loading messages
knitr::opts_chunk$set(
  tidy.opts = list(width.cutoff = 70),  # For code
  width = 70,
  collapse = TRUE, 
  comment = "#>", 
  fig.width = 7, 
  fig.align = 'center',
  fig.asp = 0.618, # 1 / phi
  fig.retina = 2,
  out.width = "700px"
)
```

I'm please to say that visdat version 0.6.0 (codename: "Superman, Lazlo Bane") is now
on CRAN. This is the first release in nearly 3 years, there are a couple of new functions for visualising numeric and binary data, as well as some maintenance and bug fixes.

Let's walk through some of the new features, bug fixes, and other misc changes.

# New Features

```{r}
#| label: load-pkgs
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(visdat)
```

## `vis_value()` - visualise values

The idea of `vis_value()` is to visualise numeric data, so that you can get a quick
idea of the values in your dataset. It does this by scaling all the data between 0 and 1, but it only works with numeric data.

```{r}
#| label: vis-value
vis_value(mtcars)
```

It can be fun and interesting to arrange by a variable and then show see how that changes the plot.

```{r}
#| label: vis-cor
vis_cor(mtcars)
mtcars %>% arrange(cyl) %>% vis_value()
```

Although fair warning that there's a whole set of statistics/data visualisation that focusses on how to arrange rows and columns - a technique called seriation. For a fun introduction, I'd recommend this lovely [blogpost](http://nicolas.kruchten.com/content/2018/02/seriation/) by [Nicholas Kruchten](https://github.com/nicolaskruchten). One day I will [implement seriation in visdat](https://github.com/ropensci/visdat/issues/8).

Note that if you use `vis_value()` on a dataset that isn't entirely numeric, you will get an error:

```{r}
#| label: show-error
#| error: true
vis_value(diamonds)
```

## `vis_binary()` visualise binary values

The `vis_binary()` function is for visualising datasets with binary values - similar to `vis_value()`, but just for binary data (0, 1, NA). 

```{r}
#| label: vis-binary
vis_binary(dat_bin)
```

Thank you to [Trish Gilholm](https://child-health-research.centre.uq.edu.au/profile/3264/trish-gilholm) for her suggested use case for this.

## Facetting in visdat

It is now possible to perform facetting for the following functions in visdat: `vis_dat()`, `vis_cor()`, and `vis_miss()` via the `facet` argument. This lead to some internal cleaning up of package code (always fun to revisit some old code and refactor!) Here's an example of facetting:

```{r}
#| label: vis-dat-facet
vis_dat(airquality, facet = Month) 
```

```{r}
#| label: vis-cor-facet
vis_cor(airquality, facet = Month) 
```

```{r}
#| label: vis-miss-facet
vis_miss(airquality, facet = Month) 
```

Notably for `vis_miss` when using facetting, you don't get column missingness summaries, as I couldn't quite work out how to do this for each facet.

Thank you to [Sam Firke's](https://twitter.com/samfirke/status/984425923243134976) initial tweet on this that inspired this, and [Jonathan Zadra's](https://github.com/jzadra) contributions in the [issue thread](https://github.com/ropensci/visdat/issues/78).

The next release will implement facetting for `vis_value()`, `vis_binary()`, `vis_compare()`, `vis_expect()`, and `vis_guess()` - see [#159](https://github.com/ropensci/visdat/issues/159) to keep track.

## Data methods for plotting

Related to facetting, I have implemented methods that provide data methods for plots with `data_vis_dat()`, `data_vis_cor()`, and `data_vis_miss()`:

```{r}
#| label: show-data-vis-dat
data_vis_dat(airquality)
```


```{r}
#| label: show-data-vis-miss
data_vis_miss(airquality)
```


```{r}
#| label: show-data-vis-cor
data_vis_cor(airquality)
```

The implementation of this works by providing these functions as S3 methods that have a `.grouped_df` method to facilitate plotting with facets.

```{r}
#| show-grouped-df
airquality %>% group_by(Month) %>% data_vis_dat()
```

## Missing values show up in list columns

`vis_dat()` `vis_miss()` and `vis_guess()` now render missing values in list-columns.
Let's demonstrate this with the `star_wars` dataset from `dplyr`, which has a few list columns.


```{r}
#| label: show-starwars
starwars
```


```{r}
#| glimpse
glimpse(starwars)
```

```{r}
#| label: show-vis-lists
vis_dat(starwars)
vis_miss(starwars)
vis_guess(starwars)
```

As you can see, lists are now displayed in the visualisation. Unfortunately `vis_guess` has trouble guessing lists, but that is a limitation due to how it guesses variable types.

Thank you to github user [cregouby](https://github.com/cregouby) for adding this in [#138](https://github.com/ropensci/visdat/pull/138).

## Abbreviation helpers

Long variable names can be annoying and can crowd a plot. The `abbreviate_vars()` function can be used to help with this:

```{r}
#| long-data
long_data <- tibble(
  really_really_long_name = c(NA, NA, 1:8),
  very_quite_long_name = c(-1:-8, NA, NA),
  this_long_name_is_something_else = c(NA, NA,
                                       seq(from = 0, to = 1, length.out = 8))
)

vis_miss(long_data)
```

Ugh no good.

Use `abbreviate_vars()` to help:

```{r}
#| label: show-abbreviate-vars
long_data %>% abbreviate_vars() %>% vis_miss()
```

You can control the length of the abbreviation with `min_length`:

```{r}
#| label: show-abbreviation-length
long_data %>% abbreviate_vars(min_length = 5) %>% vis_miss()
```

Under the hood this uses the base R function, `abbreviate()` - a gem of a function.

Thank you to [chapau3](https://github.com/chapau3), and [ivanhanigan](https://github.com/ivanhanigan) for requesting this feature ([#140](https://github.com/ropensci/visdat/issues/140) and [#9](https://github.com/ropensci/visdat/issues/9)).

## Missingness percentages are now integers.

The `vis_miss()` function shows a percentage missing of the missing values in each column - I've decided to make this round to integers, as it is only a guide and I found them to be a bit cluttered. I also do not like the idea of extracting summary statistics from graphics, so they now look like this:

```{r}
#| label: show-vis-miss-again
vis_miss(airquality)
```


For more accurate representation of missingness summaries please use the [`naniar` R package](http://naniar.njtierney.com/) functions like `miss_var_summary()`:

```{r}
#| label: show-naniar
library(naniar)
miss_var_summary(airquality)
```

Which also works with `dplyr::group_by()`:

```{r}
#| label: show-naniar-group-by
airquality %>% 
  group_by(Month) %>% 
  miss_var_summary()
```

If you find that this really bothers you and you want to have control over the percentage missingness in the columns, please file an issue on visdat and I will look into adding more user control. Ideally I would have added control for users in the first place, but it just wasn't something I was certain users wanted, and would require more arguments to a function, which require more tests...and so on. So with the mindset of keeping this package easy to maintain, I figured this might be the easiest way forward.

## Bug Fixes and Other changes

Here is a quick listing of the other changes in this release of visdat:

* No longer use `gather` internally: [#141](https://github.com/ropensci/visdat/issues/141)
* Resolve bug where `vis_value()` displayed constant values as NA values [128](https://github.com/ropensci/visdat/issues/128) - these constant values are now shown as 1.
* Removed use of the now deprecated "aes_string" from ggplot2
* Output of plot in `vis_expect` would reorder columns ([#133](https://github.com/ropensci/visdat/issues/133)), fixed in [#143](https://github.com/ropensci/visdat/pull/134) by [muschellij2](https://github.com/muschellij2).
* A new vignette on customising colour palettes in visdat, "Customising colour palettes in visdat".
* No longer uses gdtools for testing [#145](https://github.com/ropensci/visdat/issues/145)
* Use `cli` internally for error messages.
* Speed up some internal functions

# Thanks

Thank you to all the users who contributed to this release!

[muschellij2](https://github.com/muschellij2), [chapau3](https://github.com/chapau3), [ivanhanigan](https://github.com/ivanhanigan), [cregouby](https://github.com/cregouby), [jzadra](https://github.com/jzadra).
