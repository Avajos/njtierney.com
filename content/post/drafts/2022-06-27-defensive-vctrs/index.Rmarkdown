---
title: A Little Defensive Programming with Vctrs
author: Nicholas Tierney
date: '2022-06-27'
slug: defensive-vctrs
categories:
  - rstats
  - functions
tags:
  - rstats
  - functions
draft: yes
output: hugodown::md_document
---

```{r setup, include = FALSE}
options(cli.width = 70)  # For tidyverse loading messages
knitr::opts_chunk$set(
  tidy.opts = list(width.cutoff = 70),  # For code
  width = 70,
  collapse = TRUE, 
  comment = "#>", 
  fig.width = 7, 
  fig.align = 'center',
  fig.asp = 0.618, # 1 / phi
  fig.retina = 2,
  out.width = "700px"
)
```

I've been reading more into the `vctrs` R package, for potential use in the `greta` ecosystem of packages. Briefly, one of the [main motivations](https://vctrs.r-lib.org/#motivation) and benefits of the `vctrs` R is that it helps provide consistent type coercion. Type coercion is actually a really useful thing in R, since it means you can do:

```{r}
ints <- c(1L, 2L, 3L)
doubles <- c(1.1, 2.1, 3.1)
c(ints, doubles)
```

And you don't get an error, and you don't lose information - the doubles aren't stripped of their decimal values, and instead the integers are given decimals of value 0. 

However sometimes this means if you're doing data analysis and combining pieces of information together, you might end up in a situation like this:

```{r}
ones <- rep(1, 3)
trues <- rep("TRUE", 3)

one_true <- c(ones, trues)
one_true
```

And this can be problematic because you then can't add these numbers together or do things with them. Well, if you can, you get a warning and NA.

```{r}
mean(one_true)
sum(one_true)
```

This might come up in a situation where you combine two datasets together, say with `rbind`:

```{r}
options(tidyverse.quiet = TRUE)
library(tidyverse)
df1 <- tibble(
  id = 1:4,
  has_cat = sample(x = c(1,0), size = 4, replace = TRUE),
  owns_boat = sample(x = c(1,0), size = 4, replace = TRUE)
)

df1

df2 <- tibble(
  id = 5:8,
  has_cat = sample(x = c(1,0), size = 4, replace = TRUE),
  owns_boat = sample(x = c("1","0"), size = 4, replace = TRUE)
)

df2

df3 <- rbind(df1, df2)

df3
```

If you go to take the total number of people who own a boat, say by taking the sum of `owns_boat`, then you'll get an error:

```{r}
sum(df3$owns_boat)
```

This also creates other problems if you want to create combinations of other columns. Say I want to add a column `has_cat_and_boat`, like so:

```{r}
df3 %>% 
  mutate(had_cat_boat = sum(has_cat, owns_boat))
```

Then we get an error telling us there are different values.

All this is to say, that while overall I think it is the correct behaviour for R to provide this type coercion, it does have consequences that mean you need to be careful.

It is worth noting that if you use the tidyverse, `bind_rows`, you get an informative error about this combination of different types, so you'll need to fix that yourself before binding.

```{r}
bind_rows(df1, df2)
```

For completeness, this is how I would fix this error:

```{r}
df2 %>% 
  mutate(owns_boat = as.numeric(owns_boat)) %>% 
  bind_rows(df1)
```

These errors help users protect themselves against errors - as a developer, this is something we might want to do a lot of, since we want to make sure that users use the correct types of input into our functions.

So say we want to write a function for 
