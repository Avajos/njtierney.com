---
title: Some Goals for 2024
author: Nicholas Tierney
date: '2024-01-10'
slug: goals-2024
categories:
  - rstats
  - functions
  - goals
tags:
  - rstats
  - functions
  - goals
output: hugodown::md_document
---

```{r setup, include = FALSE}
options(cli.width = 70) # For tidyverse loading messages
knitr::opts_chunk$set(
  tidy.opts = list(width.cutoff = 70), # For code
  width = 70,
  collapse = TRUE,
  comment = "#>",
  fig.width = 7,
  fig.align = "center",
  fig.asp = 0.618, # 1 / phi
  fig.retina = 2,
  out.width = "700px"
)
```

![Flowers in the Victorian Alps, Ricoh GRiii, Nicholas Tierney.](img/flower-goals.jpg)

To help me be more accountable, and also work out how to plan my year and work out what's important to me, I thought I'd share some of my goals for 2024. Writing it all down is a bit scary, and it makes me think that maybe I might be a bit ambitious here. But I think it's OK to be ambitious.

## Learn JS and Rust

I'd like to try and pick up another programming language for 2024. I don't really have good fluency with other languages outside of R. I can fumble my way through python and HTML/CSS, a wee bit of C++. But I think it's important and useful to learn a new language to help broaden your own understanding. I'd like to focus on JS (javascript) and Rust.

I think JS because it has such an enormous influence on the web, and the tools we use every day. I've taken a nice course by [Garrick Aden Buie](https://github.com/gadenbuie) (I can't seem to find the course website) in 2020 (one of the last conferences I went to), but I unfortunately didn't really use JS that year so it's sort of all fell out of my head.

To learn JS I was thinking I would start with [JavaScript30](https://github.com/wesbos/JavaScript30) by [Wes Bos](https://github.com/wesbos), and then move on to [You Don't Know JS](https://github.com/getify/You-Dont-Know-JS) by [Kyle Simpson](https://github.com/getify). Hopefully I can learn and understand enough to try incorporating JS into R via quarto or htmlwidgets or something.

Rust seems like a better language to use than C++. My experience with the [rustlings](https://rustlings.cool/) course was excellent, and the error messages from rust were like, actually understandable? It was bizarre. Plus with the [rextender](https://extendr.github.io/) R package you can bundle up your R code just like you do with cpp11 or Rcpp. It'd be cool to build something fast and fun in Rust and then bundle it into an R package.

It's hard to learn two languages at the same time, so I think I'll try and do 6 months on JS, and 6 months on Rust.

-   January - June: JS
-   July - December: Rust

## Read some more programming books

I'd really like to read these three books:

-   [Statistical Rethinking](https://xcelab.net/rm/statistical-rethinking/)
-   [The Pragmatic Programmer](https://pragprog.com/titles/tpp20/the-pragmatic-programmer-20th-anniversary-edition/)
-   [Structure and Interpretation of Computer Programs](https://web.mit.edu/6.001/6.037/sicp.pdf) (potentially even the [JS edition](https://mitpress.mit.edu/9780262543231/structure-and-interpretation-of-computer-programs/))

Hopefully by saying this out aloud I will be able to actually complete this.

Similar to above, I guess I'll break this up into 3 parts of the year:

-   January - April: Statistical Rethinking (~4 chapters a month)
-   May - August: The Pragmatic Programmer (2 chapters a month)
-   September - December: Structure and Interpretation of Computer Programs (~1 chapter a month. But oh boy is that book massive...)

## Make a contribution to R Core

There is now an [R Contribution Working Group](https://contributor.r-project.org/working-group), which is focussed on encouraging new contributors to R core, with a focus on diversity and inclusion. I've joined the slack team, and put the next two meetings in my calendar.

## Courses & books

This year I'm going to be helping deliver a few more courses, the rough plan so far is:

-   Feb 7: [greta course in Canberra](https://www.statsoc.org.au/event-5513733)
-   March 25/26: [quarto for scientists](https://github.com/njtierney/qmd4sci) (online)
-   June: longitudinal data analysis
-   Later in the year: another course - functional programming? Missing data?

Accompanying these courses I'd like to publish little living books, like I've done with the [Rmarkdown for scientists book](https://github.com/njtierney/rmd4sci).

## R packages

-   Publish and finish [conmat](https://github.com/njtierney/conmat)
-   Regular releases of [greta](https://github.com/greta-dev/greta)
-   Develop and release new pipeline on [generalised stacking in insecticide resistance](https://github.com/idem-lab/map-ir-pipeline)
-   Keep my other R packages updated

## Work things

The big goals for work this year are related to the above tasks, but the big ticket items for me are:

1.  (Finally) release the Tensorflow 2 version of greta
2.  Establish regular greta releases, create a greta blog
3.  Develop documentation on the internals of greta
4.  Develop a culture and community of practice at work with code review
5.  Win grants for developing software to solve tricky problems in infectious disease modelling
6.  Publish software as JOSS papers

## Other misc tech / ideas

-   Blog regularly
-   Remember how to use `switch` reliably in R
-   Become more proficient with `git`
-   Use [lintr](https://lintr.r-lib.org/) in my projects
-   Consider doing a livestream of a tidy tuesday data cleaning / EDA
-   Condense my internet browsing into an RSS reader
-   Focus on getting quality sleep
-   Do more running

# End

My hope is that I'll review these goals at the end of 2024. Honestly it's quite scary to post these plans, and I'm questioning if this is even a good idea to do so publicly. But I think I've got the right intention, so let's leave it at that.
