---
title: '{naniar} version 1.1.0 "Prince Caspian"'
author: Nicholas Tierney
date: '2024-03-04'
slug: naniar-version-1-1-0-prince-caspian
categories:
  - rstats
  - Missing Data
  - rbloggers
  - research software engineer
  - data visualisation
tags:
  - data science
  - missing-data
  - rbloggers
  - research software engineer
output: hugodown::md_document
---

```{r setup, include = FALSE}
options(cli.width = 70) # For tidyverse loading messages
knitr::opts_chunk$set(
  tidy.opts = list(width.cutoff = 70), # For code
  width = 70,
  collapse = TRUE,
  comment = "#>",
  fig.width = 7,
  fig.align = "center",
  fig.asp = 0.618, # 1 / phi
  fig.retina = 2,
  out.width = "700px"
)
```

I'm happy to announce that naniar version 1.1.0 "Prince Caspian" is released. It's been about a year since the last releaase, so I'm happy to include some new features. Let's explore some of the new changes in this release

```{r}
options(tidyverse.quiet = TRUE)
library(tidyverse)
library(naniar)
```

# Imputation functions

I've always been a hesitant to include imputation helper functions like `impute_mean()`, and friends in {naniar}, as they aren't a great tool to use for imputation. I also really believe the [{simputation}](https://cran.r-project.org/web/packages/simputation/) R package does a great job at doing much imputation. However, sometimes you do actually want to demonstrate how bad imputing the mean is. Or sometimes you do need to impute the mean. And I'd rather make it easier for people to do this.

This release included some new functions: `impute_fixed()`, `impute_zero()`, `impute_factor()`, and `impute_mode()`. Notably, these do not implement "scoped variants" which were previously implemented - for example, `impute_fixed_if()` etc. This is in favour of using the new `across()` workflow within {dplyr}, which is a bit easier to maintain. This resolves issues [#261](https://github.com//njtierney/naniar/issues/261) and [#213](https://github.com//njtierney/naniar/issues/213).

To demonstrate these imputation functions, let's create a vector of missing values:

```{r}
library(naniar)
vec_num <- rnorm(10)
vec_int <- rpois(10, 5)
vec_fct <- factor(LETTERS[1:10])

vec_num <- set_prop_miss(vec_num, 0.4)
vec_int <- set_prop_miss(vec_int, 0.4)
vec_fct <- set_prop_miss(vec_fct, 0.4)

vec_num
vec_int
vec_fct
```

We can use `impute_fixed()` to impute fixed values into the numeric of these:

```{r}
impute_fixed(vec_num, -999)
impute_fixed(vec_int, -999)
```

And `impute_zero` is just a special case of `impute_fixed`, where the fixed value is 0:

```{r}
impute_zero(vec_num)
impute_zero(vec_int)
```

Similar to `impute_mean()`, `impute_mode()` imputes the mode:

```{r}
impute_mode(vec_num)
impute_mode(vec_int)
```

You can't however use `impute_fixed()` or `impute_zero()` on factors, and this doesn't work for factors, even if it's a new character.

```{r}
#| warning: true
impute_fixed(vec_fct, -999)
impute_zero(vec_fct)
impute_fixed(vec_fct, "ZZ")
```

However, you can use `impute_mode()`:

```{r}
impute_mode(vec_fct)
```

For factors, you can impute a specific value:

```{r}
impute_factor(vec_fct, value = "ZZ")
```

Think of it like `impute_fixed()`, but a special case for factors.

Now let's demonstrate how to do this in a data frame. First we create the data

```{r}
library(dplyr)

dat <- tibble(
  num = vec_num,
  int = vec_int,
  fct = vec_fct
)

dat
```

You can use it inside mutate like so:

```{r}
dat %>%
  mutate(
    num = impute_fixed(num, -9999),
    int = impute_zero(int),
    fct = impute_factor(fct, "out")
  )
```

Or if you want to impute across all applicable variables with a single function, you could use `where` like so, to focus on numeric data:

```{r}
dat %>%
  mutate(
    across(
      .cols = where(is.numeric),
      .fn = impute_zero
    )
  )

dat %>%
  mutate(
    across(
      .cols = where(is.numeric),
      .fn = \(x) impute_fixed(x, -99)
    )
  )
```

# Improvements 

- Add `digit` argument to `miss_var_summary` to help display percentage missing data correctly when there is a very small fraction of missingness - solving [#284](https://github.com//njtierney/naniar/issues/284).

```{r}
N <- 30000000

df <- tibble(x = rep(NA_real_, N)) %>%
  add_row(x = 0)

df %>% miss_var_summary()
df %>% miss_var_summary(digits = 6)
```

- `geom_miss_point()` works with `shape` argument [#290](https://github.com//njtierney/naniar/issues/290)

```{r}
ggplot(
  airquality,
  aes(
    x = Ozone,
    y = Solar.R,
    shape = factor(Month)
  )
) +
  geom_miss_point(size = 4)
```

- Implemented `Date`, `POSIXct` and `POSIXlt` methods for `impute_below()` - [#158](https://github.com//njtierney/naniar/issues/158)

```{r}
dat_date <- tibble(
  values = 1:7,
  number = c(111, 112, NA, NA, 108, 150, 160),
  posixct = as.POSIXct(number, origin = "1970-01-01"),
  posixlt = as.POSIXlt(number, origin = "1970-01-01"),
  date = as.Date(number)
  )
dat_date

date_date_imp <- dat_date %>% 
  mutate(
    number_imp = impute_below(number),
    .after = number
  ) %>% 
  mutate(
    posixct_imp = impute_below(posixct),
    .after = posixct
    ) %>% 
  mutate(
    posixlt_imp = impute_below(posixlt),
    .after = posixlt
  ) %>% 
  mutate(
    date_imp = impute_below(date),
    .after = date
  )

date_date_imp
```

# Bug fixes

- Fix bug with `all_complete()`, which was implemented as `!anyNA(x)` but should be `all(complete.cases(x))`.
- Correctly implement `any_na()` (and `any_miss()`) and `any_complete()`. Rework examples to demonstrate workflow for finding complete variables.
- Fix bug with `shadow_long()` not working when gathering variables of mixed type. Fix involved specifying a value transform, which defaults to character. [#314](https://github.com//njtierney/naniar/issues/314)
- Provide `replace_na_with()`, a complement to `replace_with_na()` - [#129](https://github.com//njtierney/naniar/issues/129)

```{r}
x <- c(1:5, NA, NA, NA)
x
replace_na_with(x, 0)

dat <- tibble(
  ones = c(1,1,NA),
  twos = c(NA,NA, 2),
  threes = c(NA, NA, NA)
)

dat %>% 
  mutate(
    ones = replace_na_with(ones, 0),
    twos = replace_na_with(twos, -2),
    threes = replace_na_with(threes, -3)
  )

dat %>% 
  mutate(
    across(
      everything(),
      \(x) replace_na_with(x, -99)
    )
  )
```

- Fix bug with `gg_miss_fct()` where it used a deprecated function from forcats - [#342](https://github.com//njtierney/naniar/issues/342)

# Internal changes

{naniar} now uses `cli::cli_abort()` and `cli::cli_warn()` instead of `stop()` and `warning()` ([#326](https://github.com//njtierney/naniar/issues/326)). Internally in tests we changed to use `expect_snapshot()` instead of `expect_error()`.

# Deprecations

The following functions have been soft deprecated, and will eventually be made defunct in future versions of naniar. `shadow_shift()` - [#193](https://github.com//njtierney/naniar/issues/193) in favour of `impute_below()`, and `miss_case_cumsum()` and `miss_var_cumsum()` - [#257](https://github.com//njtierney/naniar/issues/257) - in favour of `miss_case_summary(data, cumsum = TRUE)` and  `miss_var_summary(data, cumsum = TRUE)`. 

# Thanks!

Thanks to everyone for using {naniar}, I'm happy that I've got another release out the door and am looking forward to more changes in the future. Especially thanks to everyone who contributed to issues and or pull request for this release, including: [@szimmer](https://github.com/szimmer), [@HughParsonage](https://github.com/HughParsonage), , [@siavash-babaei](https://github.com/siavash-babaei), [@maksymiuks](https://github.com/maksymiuks), [@jonocarroll](https://github.com/jonocarroll), [@jzadra](https://github.com/jzadra), [@krlmlr](https://github.com/krlmlr)
