---
title: A Fun Little Use of `dplyr::across()`
author: Nicholas Tierney
date: '2022-08-08'
slug: fun-across
categories:
  - rstats
  - functions
tags:
  - rstats
  - functions
output: hugodown::md_document
---

```{r setup, include = FALSE}
options(cli.width = 70)  # For tidyverse loading messages
knitr::opts_chunk$set(
  tidy.opts = list(width.cutoff = 70),  # For code
  width = 70,
  collapse = TRUE, 
  comment = "#>", 
  fig.width = 7, 
  fig.align = 'center',
  fig.asp = 0.618, # 1 / phi
  fig.retina = 2,
  out.width = "700px"
)
```

```{r}
#| label: birds-across
#| echo: false
knitr::include_graphics(here::here("content/post/2022-08-08-fun-across/imgs/across-birds-small.jpg"))
```

_pigeons across the drain, Nick Tierney, film, olympus XA_


A colleague of mine the other day had a question along the lines of:

> How do I add multiple columns that give the ranks of values in corresponding columns

And I ended up cooking up a really fun example of using `across` from `dplyr`. I thought it would be fun to share!

Let's give a little more detail.

Load up the tidyverse.

```{r}
library(tidyverse)
```

The data they had referred to concentrations of a quantity, that they wanted to rank. We can create these like so:

```{r}
dat <- tibble(
  x_1 = runif(10),
  x_2 = runif(10),
  x_3 = runif(10)
)

dat
```


Or for fun, I did this:

```{r}
vals <- runif(30)

dat <- as_tibble(
  x = matrix(vals, nrow = 10),
  .name_repair = janitor::make_clean_names
) %>%
  rename(
    x_1 = x
  )

dat
```

> An aside: prefer `dat` over `df`. I've been burned recently by using `df` as my go-to name for data frames, but it turns out that `df` is actually a function in R, for calculating the density of an F distribution. Which is awesome, but sometimes leads to funny errors that you might not expect.

OK, so what my friend wanted was something like this:

```{r}
dat %>%  
  mutate(
    x_1_rank = rank(x_1),
    x_2_rank = rank(x_2),
    x_3_rank = rank(x_3)
  )
```

Now, that's relatively easy. But they actually have a lot of these concentration columns - sometimes just 10, other times many times that number.

The reason you might want to avoid writing this out each time is because it will involve a lot of reptition, where you might accidentally copy something twice or not increment the numbers. E.g.,

```{r}
dat %>%  
  mutate(
    x_1_rank = rank(x_1),
    x_2_rank = rank(x_2),
    x_3_rank = rank(x_2)
  )
```

See the error? `x_3_rank` is actually from `rank(x_2)`

So the question is, can you generalise this type of column creation?

Yes! Yes we can. With `across`. It looks like this.

```{r}
dat %>% 
  mutate(
    across(
      .cols = everything(),
      .fns = rank
    )
  )
```


This says:

> mutate across all columns, and use the function, `rank`, on each one.

Uh, but we want the other columns preserved...how do we do that?

With `.names` - we specify a special pattern on how we want to name the columns with `.names = "{.col}_rank"`, which says: "call it the name of the column, and then add "_rank" to it.

```{r}
dat %>% 
  mutate(
    across(
      .cols = everything(),
      .fns = rank,
      .names = "{.col}_rank"
    )
  )
```

OK, but what if we've got data that contains other columns we don't want to apply `rank` to - say, some data that looks like this:

```{r}
dat_more <- dat %>% 
  rowid_to_column(var = "id") %>% 
  mutate(code = sample(LETTERS, n()),
         .after = id)

dat_more
```

We can tell it which columns to pay attention to, or even avoid, like so:

```{r}
# pay attention to "x_"
dat_more_rank <- dat_more %>% 
  mutate(
    across(
      .cols = starts_with("x_"),
      .fns = rank,
      .names = "{.col}_rank"
    )
  )

dat_more_rank

# do it to everything EXCEPT
dat_more %>% 
  mutate(
    across(
      .cols = -c(id, code),
      .fns = rank,
      .names = "{.col}_rank"
    )
  )
```

OK, but can we make this look a little bit nicer by having the columns be like `x_1`, then `x_1_rank` and so on?

Sure! We can take advantage of the fact that we've got a pretty systematic naming scheme in this case.

```{r}
new_col_order <- sort(names(dat_more_rank))

new_col_order
```

We can use `relocate` to specify a new column order:

```{r}
dat_more_rank %>% 
  relocate(
    id,
    code,
    new_col_order
  )
```

Huh, apparently we need to use `all_of`, since using an external vector is ambiguous! Right you are, tidyverse team.

```{r}
dat_more_rank %>% 
  relocate(
    id,
    code,
    all_of(new_col_order)
  )
```

Or alternatively:

```{r}
dat_more_rank %>% 
  relocate(
    id,
    code,
    sort(names(.))
  )
```

`relocate` is a relatively new operation, it just exists to relocate existing columns, and won't remove other columns. In the past I would have done something like:

```{r}
dat_more_rank %>% 
  select(
    id,
    code,
    all_of(new_col_order),
    everything()
  )
```

With that `everything` part there being to capture any columns I forgot about, because `select` will only keep the specified columns.

There are many ways we can do these kinds of things, but to me this felt like a nice fun example.

# End

Anywho, that's a bit of tidyverse magic, maybe it'll be useful for you!


