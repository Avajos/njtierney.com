---
title: "Just Quickly: The unexpected use of functions as arguments"
date: '2019-09-29'
slug: unexpected-function
categories: [rstats,functions]
tags: [rstats,functions]
---

I think that I have learnt and forgotten, and then learnt about this feature of R a few times in the past 4 years. The idea (I think), is this: 

> 1. R allows you to pass functions as arguments
> 2. Functions can be modified inside a function

So what the hell does that mean?

Well, I think I can summarise it down to this _crazy piece of magic:_

```{r crazy-piece-of-magic}
my_fun <- function(x, fun){
  fun(x)
}
```

Now we can pass in some input, and _any_ function.

Let's take the `storms` data from `dplyr`.

```{r show-storms}
library(dplyr)
storms
```

Let's take the mean of `wind`:

```{r crazy-piece-of-magic-mean}
my_fun(storms$wind, mean)
```

And, we can also do the standard deviation, or the variance, or the median

```{r crazy-piece-of-magic-funs}
my_fun(storms$wind, sd)
my_fun(storms$wind, var)
my_fun(storms$wind, median)
```

# Why would you want to do this?

Let's say you want to summarise the `storms` data further, for each month.

We take storms, group my month, then take the mean for month, ignoring missing values.

```{r storms-summary}
storms %>% 
  group_by(month) %>%
  summarise(wind_summary = mean(wind))
```

You could repeat the code again you could vary `mean` to be, say `sd`

```{r storms-sd}
storms %>% 
  group_by(month) %>%
  summarise(wind_summary = sd(wind))
```

Over the years, every time I repeat some code like this, I have felt a tug somewhere in my brain - a little spidey sense saying (something like): "Don't repeat yourself, Nick". 

We can avoid repeating ourselves by using the template from earlier here in dplyr. We want to manipulate the summary (mean) used - so you could also take the median, variance, etc. 

We can write the following:

```{r storms-wind-summary}
storms_wind_summary <- function(fun){
  storms %>%
    group_by(month) %>%
    summarise(wind_summary = fun(wind))
}
```

And now we can pass the function name, say, mean.

```{r storms-wind-summary-mean}
storms_wind_summary(mean)
```

Or, any other function!

```{r storms-wind-summaries}
storms_wind_summary(sd)
storms_wind_summary(var)
storms_wind_summary(median)
```

We could even make our own!

```{r storms-wind-summaries-range-diff}
range_diff <- function(x){
  diff(range(x))
}
  
storms_wind_summary(range_diff)
```

Looks like there was a pretty huge range in July through to November!

Pretty neat, eh? You can manipulate the function itself!

# Going slightly further

The above was an example demonstrating _how_ you can manipulate a function being passed.

But, there are other ways to do this with dplyr that I might use instead.
We could use `summarise_at` here, to specify a function in a different, equivalent, way.

```{r storms-wind-summarise-at}
storms_wind_summary <- function(fun){
  storms %>%
    group_by(month) %>%
    summarise_at(.vars = vars(wind),
                 .funs = list(fun))
}

storms_wind_summary(mean)
storms_wind_summary(median)
```

What if we want to provide many functions? Say, the mean, median, sd, variance, all together, how they belong?

We can do this.

This is done by passing dots (ellipsis) `...` to the function. This allows for any number of inputs. 

```{r many-summaries}
storms_wind_summary <- function(...){
  storms %>%
    group_by(month) %>%
    summarise_at(.vars = vars(wind),
                 .funs = list(...))
}


storms_wind_summary(median, mean, max)
```

# What's the point of this?

So, this might not be the most useful summary of the `storms` data...and writing functions like this might not be the most general usecase. `dplyr` provides some amazingly flexible syntax to summarise data. Sometimes the answer isn't writing a function, and you want to be mindful of replicating the flexibility of `dplyr` itself.

That said, with a task like this, or any section of code, I really think it can be useful to wrap them in a function, which _describes more broadly what that section does_. And, with features like what I wrote about here, I think that you can more clearly and flexible wrap up these features for your own use.

R is flexible enough to make that quite straightforward, and I think that is pretty darn neat!

# Fin

Go forth, and use the power of functions in your work!

# PS

Upon reflection, I'm pretty sure [Mitchell O'Hara-Wild](mitchoharawild?) was the one who helped really solidify this into my brain. Thanks, Mitch!
